#!/bin/bash

# üöÄ Script de Release para Fin.Orion.Dev
# Autor: Fin.Orion.Dev Team

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√£o de ajuda
show_help() {
    echo -e "${BLUE}üöÄ Script de Release para Fin.Orion.Dev${NC}"
    echo ""
    echo "Uso: $0 [OP√á√ïES]"
    echo ""
    echo "Op√ß√µes:"
    echo "  -v, --version VERSION    Vers√£o para release (ex: 1.2.3)"
    echo "  -m, --message MESSAGE    Mensagem do commit (opcional)"
    echo "  -p, --push               Fazer push da tag automaticamente"
    echo "  -d, --dry-run            Executar sem fazer altera√ß√µes"
    echo "  -h, --help               Mostrar esta ajuda"
    echo ""
    echo "Exemplos:"
    echo "  $0 -v 1.2.3              Criar tag v1.2.3"
    echo "  $0 -v 1.2.3 -p           Criar tag e fazer push"
    echo "  $0 -v 1.2.3 -m 'feat: nova funcionalidade' -p"
    echo ""
}

# Fun√ß√£o para validar vers√£o sem√¢ntica
validate_version() {
    local version=$1
    if [[ ! $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo -e "${RED}‚ùå Erro: Vers√£o deve seguir o formato MAJOR.MINOR.PATCH (ex: 1.2.3)${NC}"
        exit 1
    fi
}

# Fun√ß√£o para verificar se h√° mudan√ßas n√£o commitadas
check_uncommitted_changes() {
    if [[ -n $(git status --porcelain) ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Aviso: H√° mudan√ßas n√£o commitadas${NC}"
        git status --short
        echo ""
        read -p "Deseja continuar mesmo assim? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo -e "${RED}‚ùå Release cancelado${NC}"
            exit 1
        fi
    fi
}

# Fun√ß√£o para verificar se a tag j√° existe
check_existing_tag() {
    local version=$1
    local tag="v$version"

    if git tag -l | grep -q "^$tag$"; then
        echo -e "${RED}‚ùå Erro: Tag $tag j√° existe${NC}"
        exit 1
    fi
}

# Fun√ß√£o para verificar testes
run_tests() {
    echo -e "${BLUE}üß™ Executando testes...${NC}"

    if ! go test -v ./...; then
        echo -e "${RED}‚ùå Testes falharam. Abortando release.${NC}"
        exit 1
    fi

    echo -e "${GREEN}‚úÖ Testes passaram${NC}"
}

# Fun√ß√£o para verificar build
test_build() {
    echo -e "${BLUE}üî® Testando build...${NC}"

    # Testar build para plataforma atual
    if ! go build -o bin/test-release cmd/main.go; then
        echo -e "${RED}‚ùå Build falhou. Abortando release.${NC}"
        exit 1
    fi

    # Limpar arquivo de teste
    rm -f bin/test-release

    echo -e "${GREEN}‚úÖ Build testado com sucesso${NC}"
}

# Fun√ß√£o para criar tag
create_tag() {
    local version=$1
    local message=$2
    local tag="v$version"

    echo -e "${BLUE}üè∑Ô∏è  Criando tag $tag...${NC}"

    if [[ -n "$message" ]]; then
        git tag -a "$tag" -m "$message"
    else
        git tag -a "$tag" -m "Release $tag"
    fi

    echo -e "${GREEN}‚úÖ Tag $tag criada localmente${NC}"
}

# Fun√ß√£o para fazer push
push_tag() {
    local version=$1
    local tag="v$version"

    echo -e "${BLUE}üì§ Fazendo push da tag $tag...${NC}"

    if git push origin "$tag"; then
        echo -e "${GREEN}‚úÖ Tag $tag enviada para o reposit√≥rio remoto${NC}"
        echo -e "${GREEN}üöÄ GitHub Actions ir√° criar o release automaticamente${NC}"
    else
        echo -e "${RED}‚ùå Erro ao fazer push da tag${NC}"
        exit 1
    fi
}

# Fun√ß√£o para mostrar informa√ß√µes do release
show_release_info() {
    local version=$1
    local tag="v$version"

    echo ""
    echo -e "${GREEN}üéâ Release $tag preparado com sucesso!${NC}"
    echo ""
    echo -e "${BLUE}üìã Pr√≥ximos passos:${NC}"
    echo "1. GitHub Actions ir√° executar automaticamente"
    echo "2. Bin√°rios ser√£o compilados para todas as plataformas"
    echo "3. Release ser√° criado em: https://github.com/$(git config --get remote.origin.url | sed 's/.*github.com[:/]\([^/]*\/[^/]*\).*/\1/')/releases"
    echo ""
    echo -e "${BLUE}üì¶ Bin√°rios que ser√£o gerados:${NC}"
    echo "- orion-dev-darwin-amd64 (macOS Intel)"
    echo "- orion-dev-darwin-arm64 (macOS Apple Silicon)"
    echo "- orion-dev-linux-amd64 (Linux Intel)"
    echo "- orion-dev-linux-arm64 (Linux ARM)"
    echo "- orion-dev-windows-amd64.exe (Windows Intel)"
    echo "- orion-dev-windows-arm64.exe (Windows ARM)"
    echo ""
}

# Vari√°veis
VERSION=""
MESSAGE=""
PUSH=false
DRY_RUN=false

# Parse argumentos
while [[ $# -gt 0 ]]; do
    case $1 in
        -v|--version)
            VERSION="$2"
            shift 2
            ;;
        -m|--message)
            MESSAGE="$2"
            shift 2
            ;;
        -p|--push)
            PUSH=true
            shift
            ;;
        -d|--dry-run)
            DRY_RUN=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Op√ß√£o desconhecida: $1${NC}"
            show_help
            exit 1
            ;;
    esac
done

# Verificar se vers√£o foi fornecida
if [[ -z "$VERSION" ]]; then
    echo -e "${RED}‚ùå Erro: Vers√£o √© obrigat√≥ria${NC}"
    show_help
    exit 1
fi

# Validar vers√£o
validate_version "$VERSION"

# Verificar se estamos no diret√≥rio correto
if [[ ! -f "go.mod" ]] || [[ ! -f "cmd/main.go" ]]; then
    echo -e "${RED}‚ùå Erro: Execute este script no diret√≥rio raiz do projeto${NC}"
    exit 1
fi

# Verificar se git est√° dispon√≠vel
if ! command -v git &> /dev/null; then
    echo -e "${RED}‚ùå Erro: Git n√£o est√° instalado${NC}"
    exit 1
fi

# Verificar se estamos em um reposit√≥rio git
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Erro: N√£o estamos em um reposit√≥rio git${NC}"
    exit 1
fi

echo -e "${BLUE}üöÄ Iniciando processo de release para vers√£o $VERSION${NC}"
echo ""

# Verificar mudan√ßas n√£o commitadas
check_uncommitted_changes

# Verificar se tag j√° existe
check_existing_tag "$VERSION"

# Executar testes
run_tests

# Testar build
test_build

# Se for dry-run, parar aqui
if [[ "$DRY_RUN" == true ]]; then
    echo -e "${YELLOW}üîç Dry-run: Nenhuma altera√ß√£o foi feita${NC}"
    echo -e "${GREEN}‚úÖ Release $VERSION est√° pronto para ser criado${NC}"
    exit 0
fi

# Criar tag
create_tag "$VERSION" "$MESSAGE"

# Fazer push se solicitado
if [[ "$PUSH" == true ]]; then
    push_tag "$VERSION"
fi

# Mostrar informa√ß√µes finais
show_release_info "$VERSION"