name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.24]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
          go test -v -coverprofile=coverage.txt -covermode=atomic ./tests/...

      - name: Run vet
        run: go vet ./...

      - name: Run linting
        run: |
          if command -v golangci-lint >/dev/null 2>&1; then
            golangci-lint run --timeout=5m
          else
            echo "golangci-lint not available, skipping"
          fi

      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.txt
          flags: unittests
          name: codecov-umbrella

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Test build for all platforms
        run: |
          echo "Testing builds for all platforms..."

          # Create bin directory if it doesn't exist
          mkdir -p bin

          # macOS Intel
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o bin/test-darwin-amd64 cmd/main.go

          # macOS ARM
          CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -o bin/test-darwin-arm64 cmd/main.go

          # Linux Intel
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o bin/test-linux-amd64 cmd/main.go

          # Linux ARM
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -o bin/test-linux-arm64 cmd/main.go

          # Windows Intel
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o bin/test-windows-amd64.exe cmd/main.go

          # Windows ARM
          CGO_ENABLED=0 GOOS=windows GOARCH=arm64 go build -o bin/test-windows-arm64.exe cmd/main.go

          echo "All builds successful!"
          ls -la bin/test-*

      - name: Cleanup test binaries
        run: rm -f bin/test-*

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run basic security checks
        run: |
          echo "Running basic security checks..."
          # Check for common security issues
          go vet -composites=false ./...
          echo "Security checks completed successfully"