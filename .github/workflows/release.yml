name: Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags

env:
  GO_VERSION: '1.24'
  GOOS: ''
  GOARCH: ''

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run tests
        env:
          CGO_ENABLED: '1'
        run: |
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
          go vet ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.txt
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          - os: darwin
            arch: amd64
            artifact_name: orion-dev-darwin-amd64
          - os: darwin
            arch: arm64
            artifact_name: orion-dev-darwin-arm64
          - os: linux
            arch: amd64
            artifact_name: orion-dev-linux-amd64
          - os: linux
            arch: arm64
            artifact_name: orion-dev-linux-arm64
          - os: windows
            arch: amd64
            artifact_name: orion-dev-windows-amd64.exe
          - os: windows
            arch: arm64
            artifact_name: orion-dev-windows-arm64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: '0'
        run: |
          echo "Building for ${{ matrix.os }}/${{ matrix.arch }}"
          go build -ldflags="-s -w" -o bin/${{ matrix.artifact_name }} cmd/main.go
          echo "Binary size:"
          ls -lh bin/${{ matrix.artifact_name }}

      - name: Generate checksum
        run: |
          cd bin
          sha256sum ${{ matrix.artifact_name }} > ${{ matrix.artifact_name }}.sha256
          echo "Checksum generated:"
          cat ${{ matrix.artifact_name }}.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            bin/${{ matrix.artifact_name }}
            bin/${{ matrix.artifact_name }}.sha256
          retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
      issues: read
      pull-requests: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Generate changelog
        id: changelog
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Generate changelog from conventional commits
          CHANGELOG=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD | grep -E "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?:" || echo "- No conventional commits found")
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Get closed issues and PRs since last release
          ISSUES=$(gh issue list --state closed --search "closed:>$(git describe --tags --abbrev=0 HEAD^)" --json number,title,url --jq '.[] | "- \(.title) (#\(.number))"')
          echo "issues<<EOF" >> $GITHUB_OUTPUT
          echo "$ISSUES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.changelog.outputs.version }}
          name: Release ${{ steps.changelog.outputs.version }}
          body: |
            ## üöÄ Release ${{ steps.changelog.outputs.version }}

            ### üìù Changes
            ${{ steps.changelog.outputs.changelog }}

            ### üîó Issues & PRs
            ${{ steps.changelog.outputs.issues }}

            ### üì¶ Downloads
            - **macOS Intel (amd64)**: `orion-dev-darwin-amd64`
            - **macOS Apple Silicon (arm64)**: `orion-dev-darwin-arm64`
            - **Linux Intel (amd64)**: `orion-dev-linux-amd64`
            - **Linux ARM (arm64)**: `orion-dev-linux-arm64`
            - **Windows Intel (amd64)**: `orion-dev-windows-amd64.exe`
            - **Windows ARM (arm64)**: `orion-dev-windows-arm64.exe`

            ### üîê Verification
            Each binary includes a SHA256 checksum file for verification.

            ### üìã Installation
            ```bash
            # Download and verify (example for Linux amd64)
            wget https://github.com/${{ github.repository }}/releases/download/${{ steps.changelog.outputs.version }}/orion-dev-linux-amd64
            wget https://github.com/${{ github.repository }}/releases/download/${{ steps.changelog.outputs.version }}/orion-dev-linux-amd64.sha256
            sha256sum -c orion-dev-linux-amd64.sha256
            chmod +x orion-dev-linux-amd64
            ```
          files: artifacts/**/*
          draft: false
          prerelease: false